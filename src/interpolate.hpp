#include "hip/hip_runtime.h"
#include <cstdint>

namespace
{

// Interpolate cells from Q1 to Q2
// Input: N - number of cells
//        Q1dofs - dofmap Q1: list of shape N x Q1_dofs_per_cell
//        Q1_dofs_per_cell: int
//        Q2dofs - dofmap Q2: list of shape N x Q2_dofs_per_cell
//        Q2_dofs_per_cell: int
//        valuesQ1: vector of values for Q1
//        valuesQ2: vector of values for Q2
//        mat_row_offset: CSR matrix row offsets for local interpolation matrix, number of entries =
//        Q2_dofs_per_cell + 1 mat_column: CSR matrix columns for local interpolation matrix
//        mat_value: CSR matrix values for local interpolation matrix
// Output: vector valuesQ2
template <typename T>
__global__ void interpolate_Q1Q2(int N, const std::int32_t* Q1dofmap, int Q1_dofs_per_cell,
                                 const std::int32_t* Q2dofmap, int Q2_dofs_per_cell,
                                 const T* valuesQ1, T* valuesQ2, const std::int32_t* mat_row_offset,
                                 const std::int32_t* mat_column, const T* mat_value)
{
  // Calculate the cell index for this thread.
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  // Check if the row index is out of bounds.
  if (i < N)
  {
    const std::int32_t* cellQ1 = Q1dofmap + i * Q1_dofs_per_cell;
    const std::int32_t* cellQ2 = Q2dofmap + i * Q2_dofs_per_cell;

    for (std::int32_t j = 0; j < Q2_dofs_per_cell; j++)
    {
      T vj = 0;
      // Use small CSR matrix on cell-local dofs
      for (std::int32_t k = mat_row_offset[j]; k < mat_row_offset[j + 1]; ++k)
        vj += mat_value[k] * valuesQ1[cellQ1[mat_column[k]]];
      valuesQ2[cellQ2[j]] = vj;
    }
  }
}

} // namespace

template <typename T>
class Interpolator
{
public:
  // Set up interpolation from Q1 to Q2
  // Q1 int - degree of input space
  // Q2 int - degree of output space
  // inp_dofmap - dofmap of input space (on device)
  // out_dofmap - dofmap of output space (on device)
  Interpolator(int Q1, int Q2, std::span<const std::int32_t> inp_dofmap,
               std::span<const std::int32_t> out_dofmap)
      : input_dofmap(inp_dofmap), output_dofmap(out_dofmap)
  {
    // Local CSR data to be copied to device
    std::vector<std::int32_t> _cols;
    std::vector<std::int32_t> _row_offset;
    std::vector<T> _vals;

    if (Q1 == 2 and Q2 == 1)
    {
      num_cell_dofs_Q1 = 27;
      num_cell_dofs_Q2 = 8;

      _cols = {0, 1, 2, 3, 4, 5, 6, 7};
      _row_offset = {0, 1, 2, 3, 4, 5, 6, 7, 8};
      _vals = {1, 1, 1, 1, 1, 1, 1, 1};
    }
    else if (Q1 == 1 and Q2 == 2)
    {
      num_cell_dofs_Q1 = 8;
      num_cell_dofs_Q2 = 27;

      _cols = {0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 0, 2, 0, 4, 1, 3, 1, 5, 2, 3, 2, 6,
               3, 7, 4, 5, 4, 6, 5, 7, 6, 7, 0, 1, 2, 3, 0, 1, 4, 5, 0, 2, 4, 6,
               1, 3, 5, 7, 2, 3, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7};
      _row_offset = {0,  1,  2,  3,  4,  5,  6,  7,  8,  10, 12, 14, 16, 18,
                     20, 22, 24, 26, 28, 30, 32, 36, 40, 44, 48, 52, 56, 64};
      _vals = {1.0,  1.0,  1.0,  1.0,  1.0,   1.0,   1.0,   1.0,   0.5,   0.5,   0.5,   0.5,  0.5,
               0.5,  0.5,  0.5,  0.5,  0.5,   0.5,   0.5,   0.5,   0.5,   0.5,   0.5,   0.5,  0.5,
               0.5,  0.5,  0.5,  0.5,  0.5,   0.5,   0.25,  0.25,  0.25,  0.25,  0.25,  0.25, 0.25,
               0.25, 0.25, 0.25, 0.25, 0.25,  0.25,  0.25,  0.25,  0.25,  0.25,  0.25,  0.25, 0.25,
               0.25, 0.25, 0.25, 0.25, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125};
    }
    else if (Q1 == 3 and Q2 == 2)
    {
      num_cell_dofs_Q1 = 64;
      num_cell_dofs_Q2 = 27;

      _cols
          = {0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  8,  9,  0,  2,  10, 11, 0,  4,  12, 13, 1,  3,
             14, 15, 1,  5,  16, 17, 2,  3,  18, 19, 2,  6,  20, 21, 3,  7,  22, 23, 4,  5,  24, 25,
             4,  6,  26, 27, 5,  7,  28, 29, 6,  7,  30, 31, 0,  1,  2,  3,  8,  9,  10, 11, 14, 15,
             18, 19, 32, 33, 34, 35, 0,  1,  4,  5,  8,  9,  12, 13, 16, 17, 24, 25, 36, 37, 38, 39,
             0,  2,  4,  6,  10, 11, 12, 13, 20, 21, 26, 27, 40, 41, 42, 43, 1,  3,  5,  7,  14, 15,
             16, 17, 22, 23, 28, 29, 44, 45, 46, 47, 2,  3,  6,  7,  18, 19, 20, 21, 22, 23, 30, 31,
             48, 49, 50, 51, 4,  5,  6,  7,  24, 25, 26, 27, 28, 29, 30, 31, 52, 53, 54, 55, 0,  1,
             2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
             24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
             46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63};

      _row_offset = {0,  1,  2,  3,  4,  5,  6,  7,  8,  12,  16,  20,  24,  28,
                     32, 36, 40, 44, 48, 52, 56, 72, 88, 104, 120, 136, 152, 216};

      _vals = {1.0,          1.0,          1.0,          1.0,          1.0,          1.0,
               1.0,          1.0,          -0.125,       -0.125,       0.625,        0.625,
               -0.125,       -0.125,       0.625,        0.625,        -0.125,       -0.125,
               0.625,        0.625,        -0.125,       -0.125,       0.625,        0.625,
               -0.125,       -0.125,       0.625,        0.625,        -0.125,       -0.125,
               0.625,        0.625,        -0.125,       -0.125,       0.625,        0.625,
               -0.125,       -0.125,       0.625,        0.625,        -0.125,       -0.125,
               0.625,        0.625,        -0.125,       -0.125,       0.625,        0.625,
               -0.125,       -0.125,       0.625,        0.625,        -0.125,       -0.125,
               0.625,        0.625,        0.015625,     0.015625,     0.015625,     0.015625,
               -0.078125,    -0.078125,    -0.078125,    -0.078125,    -0.078125,    -0.078125,
               -0.078125,    -0.078125,    0.390625,     0.390625,     0.390625,     0.390625,
               0.015625,     0.015625,     0.015625,     0.015625,     -0.078125,    -0.078125,
               -0.078125,    -0.078125,    -0.078125,    -0.078125,    -0.078125,    -0.078125,
               0.390625,     0.390625,     0.390625,     0.390625,     0.015625,     0.015625,
               0.015625,     0.015625,     -0.078125,    -0.078125,    -0.078125,    -0.078125,
               -0.078125,    -0.078125,    -0.078125,    -0.078125,    0.390625,     0.390625,
               0.390625,     0.390625,     0.015625,     0.015625,     0.015625,     0.015625,
               -0.078125,    -0.078125,    -0.078125,    -0.078125,    -0.078125,    -0.078125,
               -0.078125,    -0.078125,    0.390625,     0.390625,     0.390625,     0.390625,
               0.015625,     0.015625,     0.015625,     0.015625,     -0.078125,    -0.078125,
               -0.078125,    -0.078125,    -0.078125,    -0.078125,    -0.078125,    -0.078125,
               0.390625,     0.390625,     0.390625,     0.390625,     0.015625,     0.015625,
               0.015625,     0.015625,     -0.078125,    -0.078125,    -0.078125,    -0.078125,
               -0.078125,    -0.078125,    -0.078125,    -0.078125,    0.390625,     0.390625,
               0.390625,     0.390625,     -0.001953125, -0.001953125, -0.001953125, -0.001953125,
               -0.001953125, -0.001953125, -0.001953125, -0.001953125, 0.009765625,  0.009765625,
               0.009765625,  0.009765625,  0.009765625,  0.009765625,  0.009765625,  0.009765625,
               0.009765625,  0.009765625,  0.009765625,  0.009765625,  0.009765625,  0.009765625,
               0.009765625,  0.009765625,  0.009765625,  0.009765625,  0.009765625,  0.009765625,
               0.009765625,  0.009765625,  0.009765625,  0.009765625,  -0.048828125, -0.048828125,
               -0.048828125, -0.048828125, -0.048828125, -0.048828125, -0.048828125, -0.048828125,
               -0.048828125, -0.048828125, -0.048828125, -0.048828125, -0.048828125, -0.048828125,
               -0.048828125, -0.048828125, -0.048828125, -0.048828125, -0.048828125, -0.048828125,
               -0.048828125, -0.048828125, -0.048828125, -0.048828125, 0.244140625,  0.244140625,
               0.244140625,  0.244140625,  0.244140625,  0.244140625,  0.244140625,  0.244140625};
    }
    else if (Q1 == 2 and Q2 == 3)
    {
      num_cell_dofs_Q1 = 27;
      num_cell_dofs_Q2 = 64;

      _cols
          = {0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  8,  0,  1,  8,  0,  2,  9,  0,  2,  9,  0,  4,
             10, 0,  4,  10, 1,  3,  11, 1,  3,  11, 1,  5,  12, 1,  5,  12, 2,  3,  13, 2,  3,  13,
             2,  6,  14, 2,  6,  14, 3,  7,  15, 3,  7,  15, 4,  5,  16, 4,  5,  16, 4,  6,  17, 4,
             6,  17, 5,  7,  18, 5,  7,  18, 6,  7,  19, 6,  7,  19, 0,  1,  2,  3,  8,  9,  11, 13,
             20, 0,  1,  2,  3,  8,  9,  11, 13, 20, 0,  1,  2,  3,  8,  9,  11, 13, 20, 0,  1,  2,
             3,  8,  9,  11, 13, 20, 0,  1,  4,  5,  8,  10, 12, 16, 21, 0,  1,  4,  5,  8,  10, 12,
             16, 21, 0,  1,  4,  5,  8,  10, 12, 16, 21, 0,  1,  4,  5,  8,  10, 12, 16, 21, 0,  2,
             4,  6,  9,  10, 14, 17, 22, 0,  2,  4,  6,  9,  10, 14, 17, 22, 0,  2,  4,  6,  9,  10,
             14, 17, 22, 0,  2,  4,  6,  9,  10, 14, 17, 22, 1,  3,  5,  7,  11, 12, 15, 18, 23, 1,
             3,  5,  7,  11, 12, 15, 18, 23, 1,  3,  5,  7,  11, 12, 15, 18, 23, 1,  3,  5,  7,  11,
             12, 15, 18, 23, 2,  3,  6,  7,  13, 14, 15, 19, 24, 2,  3,  6,  7,  13, 14, 15, 19, 24,
             2,  3,  6,  7,  13, 14, 15, 19, 24, 2,  3,  6,  7,  13, 14, 15, 19, 24, 4,  5,  6,  7,
             16, 17, 18, 19, 25, 4,  5,  6,  7,  16, 17, 18, 19, 25, 4,  5,  6,  7,  16, 17, 18, 19,
             25, 4,  5,  6,  7,  16, 17, 18, 19, 25, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11,
             12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0,  1,  2,  3,  4,  5,  6,
             7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0,  1,
             2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
             24, 25, 26, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18,
             19, 20, 21, 22, 23, 24, 25, 26, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13,
             14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0,  1,  2,  3,  4,  5,  6,  7,  8,
             9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0,  1,  2,  3,
             4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
             26, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
             21, 22, 23, 24, 25, 26};

      _row_offset
          = {0,   1,   2,   3,   4,   5,   6,   7,   8,   11,  14,  17,  20,  23,  26,  29,  32,
             35,  38,  41,  44,  47,  50,  53,  56,  59,  62,  65,  68,  71,  74,  77,  80,  89,
             98,  107, 116, 125, 134, 143, 152, 161, 170, 179, 188, 197, 206, 215, 224, 233, 242,
             251, 260, 269, 278, 287, 296, 323, 350, 377, 404, 431, 458, 485, 512};

      _vals = {1.0,
               1.0,
               1.0,
               1.0,
               1.0,
               1.0,
               1.0,
               1.0,
               0.32360679774997886,
               -0.1236067977499789,
               0.8,
               -0.12360679774997917,
               0.3236067977499793,
               0.8,
               0.32360679774997897,
               -0.12360679774997894,
               0.8,
               -0.12360679774997908,
               0.32360679774997925,
               0.8,
               0.323606797749979,
               -0.1236067977499789,
               0.8,
               -0.12360679774997907,
               0.32360679774997914,
               0.8,
               0.32360679774997897,
               -0.12360679774997892,
               0.8,
               -0.12360679774997904,
               0.3236067977499792,
               0.8,
               0.32360679774997897,
               -0.1236067977499789,
               0.8,
               -0.123606797749979,
               0.3236067977499792,
               0.8,
               0.3236067977499789,
               -0.12360679774997892,
               0.8,
               -0.12360679774997911,
               0.3236067977499792,
               0.8,
               0.32360679774997886,
               -0.1236067977499789,
               0.8,
               -0.12360679774997908,
               0.32360679774997914,
               0.8,
               0.3236067977499789,
               -0.12360679774997889,
               0.8,
               -0.12360679774997903,
               0.3236067977499791,
               0.8,
               0.3236067977499789,
               -0.12360679774997897,
               0.8,
               -0.12360679774997903,
               0.32360679774997914,
               0.8,
               0.32360679774997886,
               -0.12360679774997893,
               0.8,
               -0.12360679774997907,
               0.32360679774997925,
               0.8,
               0.3236067977499789,
               -0.12360679774997889,
               0.8,
               -0.12360679774997901,
               0.3236067977499791,
               0.8,
               0.32360679774997897,
               -0.12360679774997899,
               0.8,
               -0.12360679774997896,
               0.32360679774997897,
               0.8,
               0.10472135954999577,
               -0.04,
               -0.04,
               0.015278640450004174,
               0.25888543819998333,
               0.2588854381999832,
               -0.09888543819998315,
               -0.09888543819998316,
               0.6399999999999999,
               -0.04,
               0.10472135954999584,
               0.015278640450004235,
               -0.04,
               0.2588854381999833,
               -0.09888543819998322,
               0.25888543819998333,
               -0.09888543819998316,
               0.6399999999999998,
               -0.04,
               0.015278640450004204,
               0.10472135954999587,
               -0.04,
               -0.09888543819998319,
               0.2588854381999832,
               -0.09888543819998309,
               0.25888543819998333,
               0.6399999999999998,
               0.015278640450004223,
               -0.04,
               -0.04,
               0.10472135954999591,
               -0.09888543819998316,
               -0.0988854381999832,
               0.25888543819998333,
               0.25888543819998333,
               0.6399999999999997,
               0.10472135954999577,
               -0.04,
               -0.04,
               0.015278640450004207,
               0.2588854381999832,
               0.25888543819998333,
               -0.09888543819998313,
               -0.09888543819998313,
               0.64,
               -0.04,
               0.10472135954999585,
               0.01527864045000421,
               -0.04,
               0.2588854381999832,
               -0.0988854381999832,
               0.2588854381999834,
               -0.09888543819998312,
               0.6399999999999999,
               -0.04,
               0.015278640450004244,
               0.10472135954999587,
               -0.04,
               -0.09888543819998323,
               0.2588854381999833,
               -0.09888543819998309,
               0.25888543819998333,
               0.6399999999999999,
               0.015278640450004276,
               -0.04,
               -0.04,
               0.1047213595499959,
               -0.09888543819998322,
               -0.09888543819998322,
               0.2588854381999834,
               0.2588854381999833,
               0.6399999999999998,
               0.10472135954999576,
               -0.04,
               -0.04,
               0.015278640450004212,
               0.2588854381999831,
               0.2588854381999832,
               -0.09888543819998309,
               -0.09888543819998308,
               0.6400000000000001,
               -0.04,
               0.10472135954999587,
               0.015278640450004235,
               -0.04,
               0.2588854381999831,
               -0.09888543819998322,
               0.2588854381999834,
               -0.09888543819998306,
               0.64,
               -0.04,
               0.015278640450004245,
               0.10472135954999588,
               -0.04,
               -0.09888543819998323,
               0.25888543819998316,
               -0.09888543819998309,
               0.2588854381999834,
               0.6399999999999999,
               0.015278640450004231,
               -0.04,
               -0.04,
               0.10472135954999597,
               -0.09888543819998323,
               -0.0988854381999832,
               0.25888543819998333,
               0.25888543819998333,
               0.6399999999999998,
               0.1047213595499958,
               -0.04,
               -0.04,
               0.015278640450004209,
               0.2588854381999831,
               0.25888543819998316,
               -0.09888543819998312,
               -0.09888543819998309,
               0.6399999999999999,
               -0.04,
               0.10472135954999584,
               0.015278640450004209,
               -0.04,
               0.25888543819998305,
               -0.09888543819998324,
               0.2588854381999834,
               -0.09888543819998306,
               0.6399999999999998,
               -0.04,
               0.015278640450004202,
               0.10472135954999587,
               -0.04,
               -0.09888543819998326,
               0.25888543819998305,
               -0.09888543819998309,
               0.2588854381999834,
               0.6399999999999998,
               0.015278640450004224,
               -0.04,
               -0.04,
               0.10472135954999592,
               -0.09888543819998326,
               -0.09888543819998322,
               0.25888543819998333,
               0.2588854381999834,
               0.6399999999999997,
               0.10472135954999578,
               -0.04,
               -0.04,
               0.01527864045000422,
               0.25888543819998316,
               0.2588854381999832,
               -0.09888543819998312,
               -0.09888543819998306,
               0.64,
               -0.04,
               0.10472135954999584,
               0.015278640450004214,
               -0.04,
               0.25888543819998316,
               -0.0988854381999832,
               0.2588854381999834,
               -0.09888543819998306,
               0.6399999999999999,
               -0.04,
               0.015278640450004221,
               0.10472135954999587,
               -0.04,
               -0.09888543819998317,
               0.25888543819998316,
               -0.09888543819998312,
               0.2588854381999833,
               0.6399999999999998,
               0.015278640450004221,
               -0.04,
               -0.04,
               0.10472135954999588,
               -0.09888543819998316,
               -0.09888543819998319,
               0.25888543819998333,
               0.2588854381999833,
               0.6399999999999997,
               0.10472135954999581,
               -0.04,
               -0.04,
               0.01527864045000423,
               0.25888543819998316,
               0.2588854381999833,
               -0.09888543819998309,
               -0.0988854381999831,
               0.64,
               -0.04,
               0.10472135954999584,
               0.01527864045000419,
               -0.04,
               0.25888543819998316,
               -0.09888543819998323,
               0.2588854381999834,
               -0.09888543819998309,
               0.6399999999999999,
               -0.04,
               0.015278640450004223,
               0.10472135954999584,
               -0.04,
               -0.09888543819998316,
               0.2588854381999832,
               -0.0988854381999831,
               0.25888543819998333,
               0.6399999999999998,
               0.015278640450004216,
               -0.04,
               -0.04,
               0.10472135954999588,
               -0.09888543819998313,
               -0.0988854381999832,
               0.25888543819998333,
               0.25888543819998333,
               0.6399999999999997,
               0.03388854381999827,
               -0.012944271909999142,
               -0.01294427190999914,
               0.00494427190999915,
               -0.012944271909999127,
               0.004944271909999153,
               0.00494427190999916,
               -0.0018885438199983224,
               0.08377708763999661,
               0.08377708763999661,
               0.08377708763999663,
               -0.032,
               -0.032,
               -0.032,
               -0.032,
               0.012222912360003335,
               -0.032,
               -0.032,
               0.012222912360003342,
               0.012222912360003352,
               0.20710835055998655,
               0.20710835055998655,
               0.20710835055998655,
               -0.07910835055998651,
               -0.0791083505599865,
               -0.07910835055998651,
               0.512,
               -0.012944271909999206,
               0.03388854381999833,
               0.004944271909999172,
               -0.012944271909999167,
               0.0049442719099991655,
               -0.012944271909999153,
               -0.001888543819998321,
               0.00494427190999915,
               0.0837770876399966,
               -0.032,
               -0.032,
               0.08377708763999665,
               0.08377708763999668,
               -0.032,
               0.012222912360003363,
               -0.032,
               -0.032,
               0.012222912360003349,
               -0.032,
               0.012222912360003352,
               0.2071083505599865,
               0.2071083505599865,
               -0.07910835055998655,
               0.2071083505599866,
               -0.07910835055998648,
               -0.07910835055998648,
               0.512,
               -0.01294427190999921,
               0.004944271909999165,
               0.033888543819998354,
               -0.01294427190999916,
               0.004944271909999169,
               -0.0018885438199983244,
               -0.012944271909999144,
               0.004944271909999157,
               -0.032,
               0.0837770876399966,
               -0.032,
               -0.032,
               0.012222912360003363,
               0.08377708763999664,
               0.08377708763999668,
               -0.032,
               0.012222912360003354,
               -0.032,
               0.012222912360003339,
               -0.032,
               0.2071083505599865,
               -0.07910835055998656,
               0.20710835055998653,
               -0.0791083505599865,
               0.20710835055998666,
               -0.0791083505599865,
               0.512,
               0.004944271909999146,
               -0.012944271909999173,
               -0.012944271909999163,
               0.03388854381999835,
               -0.001888543819998319,
               0.004944271909999157,
               0.004944271909999165,
               -0.012944271909999156,
               -0.032,
               -0.032,
               0.012222912360003358,
               0.08377708763999665,
               -0.032,
               0.08377708763999667,
               -0.032,
               0.08377708763999672,
               0.012222912360003352,
               0.012222912360003339,
               -0.032,
               -0.032,
               0.20710835055998644,
               -0.07910835055998655,
               -0.07910835055998654,
               0.20710835055998655,
               0.20710835055998666,
               -0.07910835055998648,
               0.512,
               -0.012944271909999194,
               0.004944271909999184,
               0.004944271909999174,
               -0.0018885438199983293,
               0.033888543819998354,
               -0.012944271909999161,
               -0.012944271909999161,
               0.004944271909999158,
               -0.032,
               -0.032,
               0.0837770876399966,
               0.01222291236000337,
               -0.032,
               0.012222912360003358,
               -0.032,
               0.012222912360003339,
               0.0837770876399967,
               0.08377708763999671,
               -0.032,
               -0.032,
               -0.07910835055998656,
               0.2071083505599865,
               0.2071083505599865,
               -0.0791083505599865,
               -0.0791083505599865,
               0.20710835055998666,
               0.512,
               0.004944271909999147,
               -0.012944271909999153,
               -0.001888543819998306,
               0.004944271909999154,
               -0.012944271909999179,
               0.03388854381999837,
               0.004944271909999148,
               -0.012944271909999161,
               -0.032,
               0.01222291236000336,
               -0.032,
               -0.032,
               0.0837770876399967,
               0.012222912360003363,
               0.012222912360003356,
               -0.032,
               0.08377708763999671,
               -0.032,
               0.08377708763999672,
               -0.032,
               -0.07910835055998656,
               0.20710835055998644,
               -0.07910835055998655,
               0.20710835055998655,
               -0.07910835055998648,
               0.20710835055998666,
               0.512,
               0.00494427190999915,
               -0.0018885438199983105,
               -0.01294427190999917,
               0.004944271909999163,
               -0.01294427190999918,
               0.004944271909999166,
               0.03388854381999839,
               -0.012944271909999168,
               0.012222912360003363,
               -0.032,
               -0.032,
               0.01222291236000337,
               0.012222912360003361,
               -0.032,
               0.08377708763999667,
               -0.032,
               -0.032,
               0.08377708763999671,
               -0.032,
               0.08377708763999671,
               -0.07910835055998655,
               -0.07910835055998654,
               0.20710835055998647,
               -0.0791083505599865,
               0.20710835055998664,
               0.20710835055998666,
               0.512,
               -0.0018885438199983439,
               0.0049442719099991725,
               0.004944271909999172,
               -0.012944271909999179,
               0.004944271909999157,
               -0.01294427190999917,
               -0.012944271909999177,
               0.03388854381999837,
               0.012222912360003354,
               0.012222912360003366,
               0.012222912360003347,
               -0.032,
               -0.032,
               -0.032,
               -0.032,
               0.08377708763999672,
               -0.032,
               -0.032,
               0.08377708763999675,
               0.08377708763999675,
               -0.07910835055998655,
               -0.07910835055998654,
               -0.07910835055998652,
               0.20710835055998653,
               0.2071083505599866,
               0.20710835055998664,
               0.512};
    }
    else
      throw std::runtime_error("Interpolation not available");

    // Checks on dofmap shapes and sizes
    assert(input_dofmap.size() % num_cell_dofs_Q1 == 0);
    assert(output_dofmap.size() % num_cell_dofs_Q2 == 0);
    assert(output_dofmap.size() / num_cell_dofs_Q2 == input_dofmap.size() / num_cell_dofs_Q1);
    assert(_row_offset.size() == num_cell_dofs_Q2 + 1);

    // Copy small CSR matrix to device
    std::int32_t* _row_ptr;
    err_check(hipMalloc((void**)&_row_ptr, _row_offset.size() * sizeof(std::int32_t)));
    mat_row_offset = std::span<std::int32_t>(_row_ptr, _row_offset.size());
    err_check(hipMemcpy(mat_row_offset.data(), _row_offset.data(),
                        _row_offset.size() * sizeof(std::int32_t), hipMemcpyHostToDevice));

    std::int32_t* _col_ptr;
    err_check(hipMalloc((void**)&_col_ptr, _cols.size() * sizeof(std::int32_t)));
    mat_column = std::span<std::int32_t>(_col_ptr, _cols.size());
    err_check(hipMemcpy(mat_column.data(), _cols.data(), _cols.size() * sizeof(std::int32_t),
                        hipMemcpyHostToDevice));

    T* _val_ptr;
    err_check(hipMalloc((void**)&_val_ptr, _vals.size() * sizeof(T)));
    mat_value = std::span<T>(_val_ptr, _vals.size());
    err_check(
        hipMemcpy(mat_value.data(), _vals.data(), _vals.size() * sizeof(T), hipMemcpyHostToDevice));

    err_check(hipDeviceSynchronize());
  }

  ~Interpolator()
  {
    // Free memory on destruction
    err_check(hipFree(mat_value.data()));
    err_check(hipFree(mat_row_offset.data()));
    err_check(hipFree(mat_column.data()));
  }

  // Interpolate from input_values to output_values (both on device)
  template <typename Vector>
  void interpolate(Vector& input_vector, Vector& output_vector)
  {
    // Input vector is also changed by MPI vector update
    T* input_values = input_vector.mutable_array().data();
    T* output_values = output_vector.mutable_array().data();

    int ncells = input_dofmap.size() / num_cell_dofs_Q1;
    assert(ncells == output_dofmap.size() / num_cell_dofs_Q2);

    dim3 block_size(256);
    dim3 grid_size((ncells + block_size.x - 1) / block_size.x);

    // LOG(INFO) << "From " << num_cell_dofs_Q1 << " dofs/cell to " << num_cell_dofs_Q2 << " on "
    //           << ncells << " cells";

    hipLaunchKernelGGL(interpolate_Q1Q2<T>, grid_size, block_size, 0, 0, ncells,
                       input_dofmap.data(), num_cell_dofs_Q1, output_dofmap.data(),
                       num_cell_dofs_Q2, input_values, output_values, mat_row_offset.data(),
                       mat_column.data(), mat_value.data());

    err_check(hipDeviceSynchronize());

    err_check(hipGetLastError());
  }

private:
  // Dofmap widths
  int num_cell_dofs_Q1;
  int num_cell_dofs_Q2;

  // Per-cell CSR interpolation matrix (on device)
  std::span<T> mat_value;
  std::span<std::int32_t> mat_column;
  std::span<std::int32_t> mat_row_offset;

  // Dofmaps (on device)
  std::span<const std::int32_t> input_dofmap;
  std::span<const std::int32_t> output_dofmap;
};
